Good morning people!
We'll get started as soon as audience arrives!

Pre workshop checks:

CAP model -> CAPACITY, Availability, Performance

Other db products-> tradeoff between them

c + a + p = 1

GLOBALLY available-> multiple choices of performances (tradeoffs)

OLTP                     OLAP
- Transactions		- Analysis
- small data		- 3Vs-> Volume, Variety, Velocity (BigData)
- web apps, mobile apps  - analytics, time series, predictions, ML
100% or 0% completion
- better suited for editing     - better suited for searching 

- sql server, mysql, db2       - HDFS, spark, cassandra

- source of data              - target of data 
- undergoes changes           - changes are NOT EXPECTED 
           
- Onprem or Cloud or Hybrid Architectures

Cloud->> EVERYTHING runs from cloud (db + app)

app-> on prem , data -> cloud

data=> on prem, app-> cloud 



-> Data Factory-> another tool for data migration
	(anywhere to anywhere-> even GCP to AWS) 


az cosmosdb create --resource-group $resGroup --name $accountName \
	--kind GlobalDocumentDB \
	--locations regionName="South Central US" failoverPriority=0 --locations regionName="East US" failoverPriority=1 \
	--default-consistency-level "Session" \
	--enable-multiple-write-locations true 
az cosmosdb create --resource-group $resGroup --name $accountName \ --kind GlobalDocumentDB \ --locations regionName="South Central US" failoverPriority=0 --locations regionName="East US" failoverPriority=1 \ --default-consistency-level "Session" \ --enable-multiple-write-locations true
usage error: --locations [KEY=VALUE ...]

New dotnet app:

dotnet new console --output .
dotnet add package Microsoft.Azure.Cosmos --version 3.7.0
dotnet add package Bogus --version 22.0.8
dotnet restore 
dotnet build 

- consistency level 
- multi region-write 
- indexing and partitioning 
- Table API 
- Java samples 

-> setup automatic failover 


-> Product catalogues, highly structured data-> SQL API
-> logs, dums, analytical unstructured data-> mOngoDB
-> IoT/Sensors/Streams -> Table API
-> Geospatial data or complex graph/neighbor/edge/vertex-> Gremlin 
-> Cassandra -> warehouse 


Strong Level-> Single Write Nodes only! Immediate Replication!
	Availability issues!
	
Eventual -> weakest form of consistency, but highest availabilty!

Session-> single or multiple region; control on latency 
	
Bounded Staleness -> we set acceptable delay in 2 forms
	1) TIME [can be days] , 2) no. of operations 
	-> collaboration tools or data lakes (non-critical workloads)

Consistent Prefix -> ORDER of data WILL NOT CHANGE

1,2,3 (incoming)-> some may get 1,2 some may get 1, some may get 1,2,3
	BUT NO ONE WILL GET 1,3,2 or 2,1 or 3,1


Clouds have 2 major services:
1) MANAGED (HDFS) -> cluster, SSH port 22
	-> monitoring will happen thru the tool 
2) SERVERLESS (COSMOS) -> no vms no ssh 
	-> Azure is responsible for monitoring!

2 kinds of diagnostics:
1) Metrics-> numbers-> PLOT
	Scalability, security (Blacklist rogue IP) 
2) Logs-> strings-> SEARCH 
	IP to block for security from LOGS! 


Pipeline-> A flow of data from source to destination
	-> EL
	-> ETL
	-> ELT

Dedicated Network channel for transfer-> LinkedServices
	(IntegrationRuntimes) 

Temporary represt. of data to avoid any schema errors and ensure
	consistency of data





